'use strict';

exports.__esModule = true;
exports.defFactory = defFactory;
exports.forkResolver = forkResolver;
exports.isFunction = isFunction;
exports.isObject = isObject;
exports.isArray = isArray;
exports.keys = keys;
exports.isNil = isNil;
exports.isFactory = isFactory;
exports.getDisplayName = getDisplayName;

var _constants = require('./constants');

function defFactory(displayName, fn, resolver) {
  var _ref;

  var _ = (_ref = {}, _ref[displayName] = function () {
    var word = fn.apply(undefined, arguments);
    if (resolver) {
      Object.defineProperty(word, _constants.RESOLVER, {
        enumerable: false,
        writable: false,
        value: resolver
      });
    }
    return word;
  }, _ref);
  Object.defineProperty(_[displayName], _constants.RECOMPOSITE, {
    enumerable: false,
    writable: false,
    configurable: false,
    value: {
      displayName: displayName,
      isFactory: true
    }
  });
  return _[displayName];
}

function forkResolver(unit, stack, context) {
  unit.apply(context, stack.slice().reverse());
  return stack;
}

function isFunction(functionLike) {
  return typeof functionLike === 'function';
}

function isObject(objectLike) {
  return objectLike !== null && typeof objectLike === 'object';
}

function isArray(arrayLike) {
  return isObject(arrayLike) && arrayLike instanceof Array;
}

function keys(objectLike) {
  return isObject(objectLike) ? Object.keys(objectLike) : [];
}

function isNil(nilLike) {
  return nilLike == null;
}

function isFactory(fn) {
  return isObject(fn) && fn[_constants.RECOMPOSITE] && fn[_constants.RECOMPOSITE].isFactory;
}

function getDisplayName(fn) {
  return isObject(fn) && fn[_constants.RECOMPOSITE] && fn[_constants.RECOMPOSITE].displayName;
}