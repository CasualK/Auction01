'use strict';

exports.__esModule = true;
exports.defaultResolver = defaultResolver;
exports.resolveUnit = resolveUnit;
exports.default = concatenate;

var _isNotProduction = require('is-not-production');

var _isNotProduction2 = _interopRequireDefault(_isNotProduction);

var _helpers = require('./internals/helpers');

var _constants = require('./internals/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultResolver(unit, stack, context) {
  return [unit.apply(context, stack.slice().reverse())];
}

function subUnitResolver(unit, stack) {
  if ((0, _helpers.isFunction)(unit)) {
    return defaultResolver(unit, stack);
  }
  return [unit];
}

function resolveArray(unit, stack) {
  if (unit.length === 0) {
    return stack;
  }
  var nextStack = stack.slice();
  for (var i = 0; i < unit.length; i++) {
    nextStack = nextStack.concat(subUnitResolver(unit[i], stack));
  }
  return nextStack;
}

function resolveObject(unit, stack) {
  var keys = Object.keys(unit);
  if (keys.length === 0) {
    return stack;
  }
  var nextProps = {};
  for (var i = 0; i < keys.length; i++) {
    nextProps[keys[i]] = subUnitResolver(unit[keys[i]], stack).pop();
  }
  return [nextProps];
}

function resolveUnit(unit, stack, context) {
  if ((0, _helpers.isFunction)(unit)) {
    return (unit[_constants.RESOLVER] || defaultResolver)(unit, stack, context);
  } else if ((0, _helpers.isArray)(unit)) {
    return resolveArray(unit, stack);
  } else if ((0, _helpers.isObject)(unit)) {
    return resolveObject(unit, stack);
  }
  return [unit];
}

function reflow(units, args, context) {
  var stack = args.slice();
  stack.reverse();
  var i = 0;
  try {
    for (; i < units.length; i++) {
      stack = resolveUnit(units[i], stack, context);
    }
  } catch (e) {
    e.compositeUnit = {
      fn: units[i],
      name: units[i].name
    };
    // Search for error handler
    i++;
    for (; i < units.length; i++) {
      if (units[i][_constants.ONERROR]) {
        stack = resolveUnit(units[i][_constants.ONERROR], stack.concat([e]), context);
        return reflow(units.slice(i + 1), stack.slice().reverse(), context);
      }
    }
    throw e;
  }
  return stack.pop();
}

function concatenate() {
  for (var _len = arguments.length, units = Array(_len), _key = 0; _key < _len; _key++) {
    units[_key] = arguments[_key];
  }

  if (_isNotProduction2.default) {
    units.filter(_helpers.isFactory).forEach(function (factory) {
      throw TypeError((0, _helpers.getDisplayName)(factory) + ' can`t be a part of chain');
    });
  }
  return function flow() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return reflow(units, args, this);
  };
}